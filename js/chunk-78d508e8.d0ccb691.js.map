{"version":3,"sources":["webpack:///./src/assets/projects/connections-wall/dropshadows_hashtag2.jpg","webpack:///./src/assets/projects/connections-wall/nw-wall-scaled.jpg","webpack:///./src/assets/projects/connections-wall/winstonstruye.com-1440.jpg","webpack:///./src/assets/projects/connections-wall/story_orbiting_related.jpg","webpack:///./src/assets/projects/connections-wall/wall_stories_open_halfres.jpg","webpack:///./src/assets/projects/connections-wall/2016-06-08-11.39.44-scaled.jpg","webpack:///./src/views/projects/ConnectionsWallProject.vue?06ca","webpack:///src/views/projects/ConnectionsWallProject.vue","webpack:///./src/views/projects/ConnectionsWallProject.vue?894a","webpack:///./src/views/projects/ConnectionsWallProject.vue","webpack:///./src/assets/projects/connections-wall/2016-10-28-13.25.37-scaled.jpg","webpack:///./src/views/projects/ConnectionsWallProject.vue?9dbc","webpack:///./src/assets/projects/connections-wall/dropshadows_easteregg.jpg"],"names":["module","exports","render","_vm","this","_h","$createElement","_c","_self","staticClass","_v","_m","attrs","staticRenderFns","component"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,yC,uBCA3CD,EAAOC,QAAU,IAA0B,mC,gDCA3CD,EAAOC,QAAU,IAA0B,2C,uBCA3CD,EAAOC,QAAU,IAA0B,2C,qBCA3CD,EAAOC,QAAU,IAA0B,8C,qBCA3CD,EAAOC,QAAU,IAA0B,+C,yCCA3C,IAAIC,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,WAAW,CAACF,EAAG,KAAK,CAACJ,EAAIO,GAAG,iDAAiDP,EAAIQ,GAAG,GAAGJ,EAAG,QAAQ,CAACE,YAAY,gBAAgBG,MAAM,CAAC,IAAM,EAAQ,QAAiE,MAAQ,MAAMT,EAAIQ,GAAG,GAAGJ,EAAG,UAAU,CAACE,YAAY,QAAQG,MAAM,CAAC,KAAO,SAAS,OAAS,QAAQ,gBAAkB,GAAG,IAAM,8CAA8CT,EAAIQ,GAAG,GAAGJ,EAAG,QAAQ,CAACE,YAAY,QAAQG,MAAM,CAAC,IAAM,EAAQ,QAAoE,MAAQ,MAAML,EAAG,cAAc,CAACA,EAAG,QAAQ,CAACK,MAAM,CAAC,UAAU,WAAW,CAACL,EAAG,QAAQ,CAACE,YAAY,QAAQ,CAACF,EAAG,QAAQ,CAACE,YAAY,mBAAmBG,MAAM,CAAC,IAAM,EAAQ,QAAiE,MAAQ,OAAO,GAAGL,EAAG,QAAQ,CAACE,YAAY,QAAQ,CAACF,EAAG,QAAQ,CAACE,YAAY,mBAAmBG,MAAM,CAAC,IAAM,EAAQ,QAA+D,MAAQ,OAAO,GAAGL,EAAG,QAAQ,CAACE,YAAY,QAAQ,CAACF,EAAG,QAAQ,CAACE,YAAY,mBAAmBG,MAAM,CAAC,IAAM,EAAQ,QAAgE,MAAQ,OAAO,IAAI,IAAI,GAAGT,EAAIQ,GAAG,GAAGJ,EAAG,QAAQ,CAACE,YAAY,QAAQG,MAAM,CAAC,IAAM,EAAQ,QAAyD,MAAQ,MAAML,EAAG,QAAQ,CAACE,YAAY,QAAQG,MAAM,CAAC,IAAM,EAAQ,QAAqE,MAAQ,MAAML,EAAG,QAAQ,CAACE,YAAY,QAAQG,MAAM,CAAC,IAAM,EAAQ,QAAqE,MAAQ,MAAMT,EAAIQ,GAAG,IAAI,IAChoDE,EAAkB,CAAC,WAAa,IAAIV,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,WAAW,CAACF,EAAG,IAAI,CAACJ,EAAIO,GAAG,eAAeH,EAAG,MAAMJ,EAAIO,GAAG,aAAaH,EAAG,IAAI,CAACK,MAAM,CAAC,KAAO,iCAAiC,CAACT,EAAIO,GAAG,mBAAmBP,EAAIO,GAAG,KAAKH,EAAG,MAAMJ,EAAIO,GAAG,gCAAgC,WAAa,IAAIP,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,WAAW,CAACF,EAAG,IAAI,CAACJ,EAAIO,GAAG,+aAA+aH,EAAG,IAAI,CAACJ,EAAIO,GAAG,2IAA2I,WAAa,IAAIP,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,WAAW,CAACF,EAAG,KAAK,CAACJ,EAAIO,GAAG,oBAAoBH,EAAG,IAAI,CAACJ,EAAIO,GAAG,2BAA2BH,EAAG,IAAI,CAACK,MAAM,CAAC,KAAO,gDAAgD,CAACT,EAAIO,GAAG,iBAAiBP,EAAIO,GAAG,qVAAqVH,EAAG,IAAI,CAACJ,EAAIO,GAAG,qMAAqMH,EAAG,OAAO,CAACJ,EAAIO,GAAG,gBAAgBP,EAAIO,GAAG,oyBAAoyBH,EAAG,IAAI,CAACJ,EAAIO,GAAG,0UAA0UH,EAAG,IAAI,CAACJ,EAAIO,GAAG,0YAA0Y,WAAa,IAAIP,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,WAAW,CAACF,EAAG,KAAK,CAACJ,EAAIO,GAAG,0CAA0CH,EAAG,IAAI,CAACJ,EAAIO,GAAG,mlBAAmlBH,EAAG,IAAI,CAACJ,EAAIO,GAAG,qHAAqHH,EAAG,IAAI,CAACK,MAAM,CAAC,KAAO,2CAA2C,CAACT,EAAIO,GAAG,cAAcP,EAAIO,GAAG,sRAAsRH,EAAG,IAAI,CAACJ,EAAIO,GAAG,m2BAAm2BH,EAAG,KAAK,CAACJ,EAAIO,GAAG,yDAAyDH,EAAG,IAAI,CAACJ,EAAIO,GAAG,+xBAA+xB,WAAa,IAAIP,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,WAAW,CAACF,EAAG,IAAI,CAACJ,EAAIO,GAAG,2BAA2BH,EAAG,IAAI,CAACK,MAAM,CAAC,KAAO,2DAA2D,CAACT,EAAIO,GAAG,kBAAkBP,EAAIO,GAAG,KAAKH,EAAG,MAAMJ,EAAIO,GAAG,uBAAuBH,EAAG,IAAI,CAACK,MAAM,CAAC,KAAO,+BAA+B,CAACT,EAAIO,GAAG,eAAeP,EAAIO,GAAG,YCgJrzN,KCjJ+W,I,wBCQ3WI,EAAY,eACd,EACAZ,EACAW,GACA,EACA,KACA,WACA,MAIa,aAAAC,E,8BCnBfd,EAAOC,QAAU,IAA0B,+C,kCCA3C,W,qBCAAD,EAAOC,QAAU,IAA0B","file":"js/chunk-78d508e8.d0ccb691.js","sourcesContent":["module.exports = __webpack_public_path__ + \"img/dropshadows_hashtag2.ceaf24ea.jpg\";","module.exports = __webpack_public_path__ + \"img/nw-wall-scaled.bd61903d.jpg\";","module.exports = __webpack_public_path__ + \"img/winstonstruye.com-1440.4fe68b1f.jpg\";","module.exports = __webpack_public_path__ + \"img/story_orbiting_related.53fb190a.jpg\";","module.exports = __webpack_public_path__ + \"img/wall_stories_open_halfres.4aa76738.jpg\";","module.exports = __webpack_public_path__ + \"img/2016-06-08-11.39.44-scaled.654a14a6.jpg\";","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"project\"},[_c('h1',[_vm._v(\"Connections Wall at Northwestern University\")]),_vm._m(0),_c('b-img',{staticClass:\"media fade-in\",attrs:{\"src\":require(\"@/assets/projects/connections-wall/winstonstruye.com-1440.jpg\"),\"fluid\":\"\"}}),_vm._m(1),_c('b-embed',{staticClass:\"media\",attrs:{\"type\":\"iframe\",\"aspect\":\"16by9\",\"allowfullscreen\":\"\",\"src\":\"https://player.vimeo.com/video/252630187\"}}),_vm._m(2),_c('b-img',{staticClass:\"media\",attrs:{\"src\":require(\"@/assets/projects/connections-wall/wall_stories_open_halfres.jpg\"),\"fluid\":\"\"}}),_c('b-container',[_c('b-row',{attrs:{\"align-v\":\"center\"}},[_c('b-col',{staticClass:\"mb-2\"},[_c('b-img',{staticClass:\"media tripletImg\",attrs:{\"src\":require(\"@/assets/projects/connections-wall/story_orbiting_related.jpg\"),\"fluid\":\"\"}})],1),_c('b-col',{staticClass:\"mb-2\"},[_c('b-img',{staticClass:\"media tripletImg\",attrs:{\"src\":require(\"@/assets/projects/connections-wall/dropshadows_hashtag2.jpg\"),\"fluid\":\"\"}})],1),_c('b-col',{staticClass:\"mb-2\"},[_c('b-img',{staticClass:\"media tripletImg\",attrs:{\"src\":require(\"@/assets/projects/connections-wall/dropshadows_easteregg.jpg\"),\"fluid\":\"\"}})],1)],1)],1),_vm._m(3),_c('b-img',{staticClass:\"media\",attrs:{\"src\":require(\"@/assets/projects/connections-wall/nw-wall-scaled.jpg\"),\"fluid\":\"\"}}),_c('b-img',{staticClass:\"media\",attrs:{\"src\":require(\"@/assets/projects/connections-wall/2016-06-08-11.39.44-scaled.jpg\"),\"fluid\":\"\"}}),_c('b-img',{staticClass:\"media\",attrs:{\"src\":require(\"@/assets/projects/connections-wall/2016-10-28-13.25.37-scaled.jpg\"),\"fluid\":\"\"}}),_vm._m(4)],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"topInfo\"},[_c('p',[_vm._v(\" When: 2016\"),_c('br'),_vm._v(\" Agency: \"),_c('a',{attrs:{\"href\":\"http://www.potiondesign.com/\"}},[_vm._v(\"Potion Design\")]),_vm._v(\" \"),_c('br'),_vm._v(\" Role: Lead Programmer \")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_c('p',[_vm._v(\" We created a 20x5 foot multi-touch, multi-user interactive wall for the Northwestern University Visitor Center. The nodes in the scene represent stories and 'hashtags', which provide information to prospective students and their families in a playful manner. The application is built as both a user interface filled with panels and scroll views, driven by a physics simulation based on fluids and a network of mass-springs. \")]),_c('p',[_vm._v(\" We installed the software at two locations: the main NYU campus in Evanston, IL, and their satellite space in San Francisco, CA. \")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_c('h2',[_vm._v(\"User Interface\")]),_c('p',[_vm._v(\" The UI was built with \"),_c('a',{attrs:{\"href\":\"https://github.com/richardeakin/Cinder-View\"}},[_vm._v(\"Cinder-View\")]),_vm._v(\", with this being an ideal use case for testing and developing its multi-touch abilities. The interface is designed so that nine people can interact with the application at the same time (one per portrait display). This was indeed how the interface ended up getting used many times directly before or after a talk in the visitor hall. \")]),_c('p',[_vm._v(\" When you tap on a node, a story panel appears containing an image / video carousel, some text paragraphs, and a smaller network of related story nodes. The image carousel is built as a custom \"),_c('code',[_vm._v(\"ScrollView\")]),_vm._v(\", where each page stacks on top of the other. The transition between pages ended up being quite fun to see; since there were no enforced size or aspect requirements the different image stacks each looked and animated a bit differently. The largest hurdle was in performance, as it was possible for all nine 1080p (max resolution) videos to be playing simultaneously, while users are scrolling through the carousel. There was not much of an ability to limit this since the content was CMS driven in Wordpress and the nodes are floating around the screen, meaning that any story with X number of videos in it could pop up at any time, on any screen. I ended up using a pool of video players that were built on Cinder-WMFPlayer, which solved most of the problems around UI hitches during video loads. \")]),_c('p',[_vm._v(\" To handle anti-aliasing at this high resolution while avoiding hardware MSAA, most things were rendered with signed distance fields (SDFs), like the simple geometric shapes (circles, rectangles, and lines connecting nodes). The text was also rendered using SDF's, and a static glyph map that was generated in a preprocess. \")]),_c('p',[_vm._v(\" We had many places with text on top of images and other aspects of the scene, so drop-shadows were a natural solution to make these more legible. For the story image carousel, I managed this with a custom shader since the pages are rectangular. For text, it's implemented as a Cinder-View Filter, which renders and caches an image of the drop-shadow for any semi-transparent content. \")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_c('h2',[_vm._v(\"Node Physics, Movement and Placement\")]),_c('p',[_vm._v(\" The main concept behind the scene was that of an aquarium filled with interlinked 'story nodes' you could interact with, evolving over time to present new information. I modeled the node connections as an N to N mass-spring network, where resting distances were fixed when a node was spawned. The physics update was implemented using OpenGL transform feedback on a fixed set of instanced geometry, which required limiting the number of connections in some way. A maximum of four links seemed to be enough, although for stability there is also an additional attribute for 'reverse links'. \")]),_c('p',[_vm._v(\" The node movement is driven by the velocity buffer of a 2D fluid simulation (I used Hai Nguyen's implementation \"),_c('a',{attrs:{\"href\":\"https://github.com/chaoticbob/CinderFx\"}},[_vm._v(\"CinderFx\")]),_vm._v(\") applied to the 'surface level' of the nodes, or in other words what was closest to the screen. Touches are injected into the velocity field so that a person's swipe causes the nodes to sway in that direction, and also get pulled and rotated in 3D by their linked nodes. \")]),_c('p',[_vm._v(\" The nodes are managed spatially with a grid system that tallies whether there are two many nodes in a given area, and also whether there are too few of a specific type. When there are too many, a 'repelling magnet' is placed, which causes the nodes in that area to rotate around a randomized axis, outwards until they are off-screen. This caused a nice rolling effect, which really improved the 'underwater' feeling of the scene. If the nodes are really bunched up, I just kill them off by shooting the node backward in the Z direction, causing it to fade out in the fog. Similarly, if there aren't enough nodes of a given type within a region, a suitable node is spawned and faded in from far away along the z-axis, so that it fades in naturally. This spawning also happens for story nodes needed for the UI mode if there isn't a particular one close enough. \")]),_c('h2',[_vm._v(\"Combining the Physics Simulation and User Interface\")]),_c('p',[_vm._v(\" The nodes live freely within the fluid simulation, yet they are also used to populate the Story and Category UI pannels. In order to move from the free-moving physics world into a usable interface, constraints were introduced to control the positions. When a node is marked as in use for a UI panel, it gets an anchor position, yet it is still allowed to act as it usually would within the simulation. Maximum and minimum positions are set that restrict the node to reasonable distortions within the UI, but they are otherwise still updated within the physics loop. Allowing the physics loop to always affect the nodes tied to the UI resulted in a quite fluid and playful experience, much more engaging compared to most interfaces designed for web or other touch devices I've encountered. \")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_c('p',[_vm._v(\" More info on Potion's \"),_c('a',{attrs:{\"href\":\"https://www.potiondesign.com/project/connections-wall/\"}},[_vm._v(\"project page\")]),_vm._v(\".\"),_c('br'),_vm._v(\" Made in C++ using \"),_c('a',{attrs:{\"href\":\"https://www.libcinder.org/\"}},[_vm._v(\"libcinder\")]),_vm._v(\". \")])])}]\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"project\">\n        <h1>Connections Wall at Northwestern University</h1>\n        <div class=\"topInfo\">\n            <p>\n                When: 2016<br />\n                Agency:\n                <a href=\"http://www.potiondesign.com/\">Potion Design</a> <br />\n                Role: Lead Programmer\n            </p>\n        </div>\n        <b-img class=\"media fade-in\" src=\"@/assets/projects/connections-wall/winstonstruye.com-1440.jpg\" fluid></b-img>\n        <div class=\"content\">\n            <p>\n                We created a 20x5 foot multi-touch, multi-user interactive wall for the Northwestern University Visitor\n                Center. The nodes in the scene represent stories and 'hashtags', which provide information to\n                prospective students and their families in a playful manner. The application is built as both a user\n                interface filled with panels and scroll views, driven by a physics simulation based on fluids and a\n                network of mass-springs.\n            </p>\n            <p>\n                We installed the software at two locations: the main NYU campus in Evanston, IL, and their satellite\n                space in San Francisco, CA.\n            </p>\n        </div>\n        <b-embed\n            class=\"media\"\n            type=\"iframe\"\n            aspect=\"16by9\"\n            allowfullscreen\n            src=\"https://player.vimeo.com/video/252630187\"\n        ></b-embed>\n        <div class=\"content\">\n            <h2>User Interface</h2>\n            <p>\n                The UI was built with\n                <a href=\"https://github.com/richardeakin/Cinder-View\">Cinder-View</a>, with this being an ideal use case\n                for testing and developing its multi-touch abilities. The interface is designed so that nine people can\n                interact with the application at the same time (one per portrait display). This was indeed how the\n                interface ended up getting used many times directly before or after a talk in the visitor hall.\n            </p>\n            <p>\n                When you tap on a node, a story panel appears containing an image / video carousel, some text\n                paragraphs, and a smaller network of related story nodes. The image carousel is built as a custom\n                <code>ScrollView</code>, where each page stacks on top of the other. The transition between pages ended\n                up being quite fun to see; since there were no enforced size or aspect requirements the different image\n                stacks each looked and animated a bit differently. The largest hurdle was in performance, as it was\n                possible for all nine 1080p (max resolution) videos to be playing simultaneously, while users are\n                scrolling through the carousel. There was not much of an ability to limit this since the content was CMS\n                driven in Wordpress and the nodes are floating around the screen, meaning that any story with X number\n                of videos in it could pop up at any time, on any screen. I ended up using a pool of video players that\n                were built on Cinder-WMFPlayer, which solved most of the problems around UI hitches during video loads.\n            </p>\n            <p>\n                To handle anti-aliasing at this high resolution while avoiding hardware MSAA, most things were rendered\n                with signed distance fields (SDFs), like the simple geometric shapes (circles, rectangles, and lines\n                connecting nodes). The text was also rendered using SDF's, and a static glyph map that was generated in\n                a preprocess.\n            </p>\n            <p>\n                We had many places with text on top of images and other aspects of the scene, so drop-shadows were a\n                natural solution to make these more legible. For the story image carousel, I managed this with a custom\n                shader since the pages are rectangular. For text, it's implemented as a Cinder-View Filter, which\n                renders and caches an image of the drop-shadow for any semi-transparent content.\n            </p>\n        </div>\n        <b-img class=\"media\" src=\"@/assets/projects/connections-wall/wall_stories_open_halfres.jpg\" fluid />\n        <b-container>\n            <b-row align-v=\"center\">\n                <b-col class=\"mb-2\">\n                    <b-img\n                        class=\"media tripletImg\"\n                        src=\"@/assets/projects/connections-wall/story_orbiting_related.jpg\"\n                        fluid\n                    />\n                </b-col>\n                <b-col class=\"mb-2\">\n                    <b-img\n                        class=\"media tripletImg\"\n                        src=\"@/assets/projects/connections-wall/dropshadows_hashtag2.jpg\"\n                        fluid\n                    />\n                </b-col>\n                <b-col class=\"mb-2\">\n                    <b-img\n                        class=\"media tripletImg\"\n                        src=\"@/assets/projects/connections-wall/dropshadows_easteregg.jpg\"\n                        fluid\n                    />\n                </b-col>\n            </b-row>\n        </b-container>\n        <div class=\"content\">\n            <h2>Node Physics, Movement and Placement</h2>\n            <p>\n                The main concept behind the scene was that of an aquarium filled with interlinked 'story nodes' you\n                could interact with, evolving over time to present new information. I modeled the node connections as an\n                N to N mass-spring network, where resting distances were fixed when a node was spawned. The physics\n                update was implemented using OpenGL transform feedback on a fixed set of instanced geometry, which\n                required limiting the number of connections in some way. A maximum of four links seemed to be enough,\n                although for stability there is also an additional attribute for 'reverse links'.\n            </p>\n            <p>\n                The node movement is driven by the velocity buffer of a 2D fluid simulation (I used Hai Nguyen's\n                implementation <a href=\"https://github.com/chaoticbob/CinderFx\">CinderFx</a>) applied to the 'surface\n                level' of the nodes, or in other words what was closest to the screen. Touches are injected into the\n                velocity field so that a person's swipe causes the nodes to sway in that direction, and also get pulled\n                and rotated in 3D by their linked nodes.\n            </p>\n            <p>\n                The nodes are managed spatially with a grid system that tallies whether there are two many nodes in a\n                given area, and also whether there are too few of a specific type. When there are too many, a 'repelling\n                magnet' is placed, which causes the nodes in that area to rotate around a randomized axis, outwards\n                until they are off-screen. This caused a nice rolling effect, which really improved the 'underwater'\n                feeling of the scene. If the nodes are really bunched up, I just kill them off by shooting the node\n                backward in the Z direction, causing it to fade out in the fog. Similarly, if there aren't enough nodes\n                of a given type within a region, a suitable node is spawned and faded in from far away along the z-axis,\n                so that it fades in naturally. This spawning also happens for story nodes needed for the UI mode if\n                there isn't a particular one close enough.\n            </p>\n            <h2>Combining the Physics Simulation and User Interface</h2>\n            <p>\n                The nodes live freely within the fluid simulation, yet they are also used to populate the Story and\n                Category UI pannels. In order to move from the free-moving physics world into a usable interface,\n                constraints were introduced to control the positions. When a node is marked as in use for a UI panel, it\n                gets an anchor position, yet it is still allowed to act as it usually would within the simulation.\n                Maximum and minimum positions are set that restrict the node to reasonable distortions within the UI,\n                but they are otherwise still updated within the physics loop. Allowing the physics loop to always affect\n                the nodes tied to the UI resulted in a quite fluid and playful experience, much more engaging compared to \n                most interfaces designed for web or other touch devices I've encountered.\n            </p>\n        </div>\n        <b-img class=\"media\" src=\"@/assets/projects/connections-wall/nw-wall-scaled.jpg\" fluid />\n        <b-img class=\"media\" src=\"@/assets/projects/connections-wall/2016-06-08-11.39.44-scaled.jpg\" fluid />\n        <b-img class=\"media\" src=\"@/assets/projects/connections-wall/2016-10-28-13.25.37-scaled.jpg\" fluid />\n        <div class=\"content\">\n            <p>\n                More info on Potion's <a href=\"https://www.potiondesign.com/project/connections-wall/\">project page</a>.<br>\n                Made in C++ using <a href=\"https://www.libcinder.org/\">libcinder</a>.\n            </p>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n};\n</script>\n\n<style lang=\"scss\" scoped>\n\n@import \"../../assets/projects/style.scss\";\n@import \"../../assets/common.scss\";\n\n.tripletImg {\n    max-width: 20em;\n}\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ConnectionsWallProject.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ConnectionsWallProject.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ConnectionsWallProject.vue?vue&type=template&id=eda24f3c&scoped=true&\"\nimport script from \"./ConnectionsWallProject.vue?vue&type=script&lang=js&\"\nexport * from \"./ConnectionsWallProject.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ConnectionsWallProject.vue?vue&type=style&index=0&id=eda24f3c&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"eda24f3c\",\n  null\n  \n)\n\nexport default component.exports","module.exports = __webpack_public_path__ + \"img/2016-10-28-13.25.37-scaled.e7ab3fb1.jpg\";","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ConnectionsWallProject.vue?vue&type=style&index=0&id=eda24f3c&lang=scss&scoped=true&\"","module.exports = __webpack_public_path__ + \"img/dropshadows_easteregg.e2bb1a6c.jpg\";"],"sourceRoot":""}