{"version":3,"sources":["webpack:///./src/assets/projects/kelproom/hallway-scaled.jpg","webpack:///./src/views/projects/KelpProject.vue?36eb","webpack:///./src/assets/projects/kelproom/kelpstrand_inspector.png","webpack:///./src/assets/projects/kelproom/ladder-scaled.jpg","webpack:///./src/assets/projects/kelproom/room_with_wechat_stubs.jpg","webpack:///./src/assets/projects/kelproom/kelproom_hallway.jpg","webpack:///./src/assets/projects/kelproom/kelproom_inapp.jpg","webpack:///./src/views/projects/KelpProject.vue?4a77","webpack:///src/views/projects/KelpProject.vue","webpack:///./src/views/projects/KelpProject.vue?54bd","webpack:///./src/views/projects/KelpProject.vue","webpack:///./src/assets/projects/kelproom/kelproom_inapp_ui.jpg","webpack:///./src/assets/projects/kelproom/joint_structure.jpg","webpack:///./src/assets/projects/kelproom/strand_layout_lod.png","webpack:///./src/assets/projects/kelproom/kelproom_4walls.jpg","webpack:///./src/assets/projects/kelproom/warping_config-scaled.jpg","webpack:///./src/assets/projects/kelproom/scene_viewports.jpg"],"names":["module","exports","render","_vm","this","_h","$createElement","_c","_self","staticClass","_v","_m","attrs","staticStyle","staticRenderFns","component"],"mappings":"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","file":"js/chunk-2e9f79c2.32fe6e95.js","sourcesContent":["module.exports = __webpack_public_path__ + \"img/hallway-scaled.35e6d29e.jpg\";","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./KelpProject.vue?vue&type=style&index=0&id=520286e2&lang=scss&scoped=true&\"","module.exports = __webpack_public_path__ + \"img/kelpstrand_inspector.75e57385.png\";","module.exports = __webpack_public_path__ + \"img/ladder-scaled.b9e9aa45.jpg\";","module.exports = __webpack_public_path__ + \"img/room_with_wechat_stubs.8132da8f.jpg\";","module.exports = __webpack_public_path__ + \"img/kelproom_hallway.83bd91ec.jpg\";","module.exports = __webpack_public_path__ + \"img/kelproom_inapp.04fefce5.jpg\";","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"project\"},[_c('h1',[_vm._v(\"Kelp Room at Power Station of Art, Shanghai\")]),_vm._m(0),_c('div',{staticClass:\"media\"},[_c('b-embed',{staticClass:\"media\",attrs:{\"type\":\"iframe\",\"aspect\":\"16by9\",\"allowfullscreen\":\"\",\"src\":\"https://player.vimeo.com/video/383930410\"}})],1),_vm._m(1),_c('div',{staticClass:\"media\"},[_c('b-carousel',{staticStyle:{\"text-shadow\":\"1px 1px 2px #333\"},attrs:{\"id\":\"carousel-1\",\"interval\":6000,\"controls\":\"\",\"indicators\":\"\",\"background\":\"#ababab\",\"img-width\":\"1920\",\"img-height\":\"1280\"}},[_c('b-carousel-slide',{attrs:{\"img-src\":require(\"@/assets/projects/kelproom/room_with_wechat_stubs.jpg\")}}),_c('b-carousel-slide',{attrs:{\"img-src\":require(\"@/assets/projects/kelproom/hallway-scaled.jpg\")}}),_c('b-carousel-slide',{attrs:{\"img-src\":require(\"@/assets/projects/kelproom/kelproom_hallway.jpg\")}}),_c('b-carousel-slide',{attrs:{\"img-src\":require(\"@/assets/projects/kelproom/kelproom_4walls.jpg\")}}),_c('b-carousel-slide',{attrs:{\"img-src\":require(\"@/assets/projects/kelproom/kelproom_inapp.jpg\")}}),_c('b-carousel-slide',{attrs:{\"img-src\":require(\"@/assets/projects/kelproom/kelproom_inapp_ui.jpg\")}})],1)],1),_c('div',{staticClass:\"content\"},[_c('h2',[_vm._v(\"Technical Description\")]),_vm._m(2),_c('h3',[_vm._v(\"Hardware Setup\")]),_c('p',[_vm._v(\" Each room runs on one Windows 10 PC with an Intel Core i7-9800X CPU and dual NVidia Quadro RTX 5000 GPUs. We used NVidia Mosaic to stitch together seven 1080p displays for the room with four walls and five 1080p displays for the corridor (three walls), both laid out as a long horizontal strip. \")]),_c('p',[_vm._v(\" We manage the projector overlap as well as varying shapes of the walls using Cinder-Warping, which was configured per-room with a GUI built directly into the application. Using a custom warping solution here allowed us to work fast without the need of hiring a third-party vendor to handle projection mapping, and at the same time allow us to make last-minute adjustments within our tight time-frame. \")]),_c('b-img',{staticClass:\"media\",attrs:{\"src\":require(\"@/assets/projects/kelproom/warping_config-scaled.jpg\"),\"fluid\":\"\"}}),_c('h3',[_vm._v(\"Motion Sensors\")]),_c('p',[_vm._v(\" The scene is made interactive with a network of Intel RealSense D435 depth cameras, which output motion vectors that are injected as temperature splats into a 3D fluid field. Each sensor runs on a separate Raspberry Pi 3, computes sparse optical flow on the depth image and sends motion vectors to the client PC over a websocket. We built a gui to monitor this, filter or solo specific sensors, and also playback simple recordings of users in the space for testing. \")]),_c('p',[_vm._v(\" The sensors had to be mounted quite high, and this combined with the dark nature of the room meant quite a lot of noise. We combated this by considering the motion vectors over time, so only sudden and drastic movements (eg. walking) would trigger motion vectors. \")]),_c('b-img',{staticClass:\"media\",attrs:{\"src\":require(\"@/assets/projects/kelproom/ladder-scaled.jpg\"),\"fluid\":\"\"}}),_c('h3',[_vm._v(\"Scene\")]),_c('p',[_vm._v(\" To render the scene within the panoramic projector layout, a separate viewport is configured for each wall, with perspective cameras (ci::CameraPersp) centered at the scene origin and rotated ninety degrees to each other. Due to the uneven shape of the room (the front and back walls were about four times longer than the left and right walls), we weren’t able to achieve a perfect ‘skybox’ feeling at all depths, so we focused on configuring each camera’s field of view to align up at a specific distance from the origin. Then we focused kelp strands near the corners at this distance, so that they could naturally sway between the walls. Strands at other distances near the wall edges were placed considerably further back, so that (along with the fog at this distance) they felt like a natural part of the forest composition, despite not being able to traverse between walls. Creating a completely seamless experience between adjacent walls is something I’d like to return to in future projects since it really is quite effective in providing immersion in public spaces like our arrangement. \")]),_c('b-img',{staticClass:\"media\",attrs:{\"src\":require(\"@/assets/projects/kelproom/scene_viewports.jpg\"),\"fluid\":\"\"}}),_c('h3',[_vm._v(\"Structure of the Kelp Strands\")]),_c('b-img',{staticClass:\"media-right\",attrs:{\"right\":\"\",\"src\":require(\"@/assets/projects/kelproom/joint_structure.jpg\"),\"width\":\"250px\"}}),_c('p',[_vm._v(\" The kelps stipes (strands or stalks) were modeled as rope joints anchored on the seafloor, slightly reducing the spring coefficient as you go further from the base. They were rendered with a single instanced ci::geom::Cylinder, where the cylinder’s width was controlled based on height and a per-strand randomness. The kelp blades (leaves) were modeled as cloths (NxM lattice of joints) anchored on a specific stipe joint, rendered with a geom::Plane and randomly picking from a set of transparency enabled textures. The spring coefficient of the center-most row of joints is increased a bit to give the blade a bit more of a spine as it sways. \")]),_c('h3',[_vm._v(\"Physics and Geometry\")]),_c('p',[_vm._v(\" The physics simulation is handled using one compute shader, which processes an SSBO of about 500k mass-spring joints. While most of the application runs at a 60fps fixed timestep, the physics loop must run many more times than this to allow for the spring forces to resolve. For our large canvas, we could only eke out eight physics updates per app update, although it would have been nice to run it closer to about 20x. I used basic midpoint Euler integration, which was good enough for our needs as we didn’t deal with collisions. \")]),_c('p',[_vm._v(\" The initial spawning positions of each kelp strand and blade are repositioned to look more natural using B-Spline interpolation and some simple fractal noise to distribute blade placement. These positions essentially become restoring points for each joint, so that no matter how users affected the scene via movement, each joint would always restore to their initial positions. This was quite a rigid solution in my opinion, but it solved many problems around using spring-mass physics within an interactive and noisy environment, so that we could ensure the scene always looked natural. In the future, I’d like to investigate a solution that uses joint to joint constraints in these situations, so that the spatial relationships can be conserved while still allowing the shape of each strand and joint to evolve over time, as it would in the ocean. \")]),_c('p',[_vm._v(\" It was necessary for quite a high count of physics joints in order to make the scene look natural while standing right next to the walls, which was the main motivation behind implementing custom physics on the GPU. However since vertex drawing was nowhere’s near the bottleneck, I was able to reduce the count quite considerably using cubic and bicubic interpolation to try extremely smooth curves for the kelp stipes and blades, respectively. The mapping was achieved by taking the floating point texture coordinate for each vertex and converting it to a 1D index into the joints buffer. This scaled quite nicely since we could control the smoothness of the geometry completely independent of the interactive joints, which is great for when you don’t exactly know what type of performance hurdles you’ll be up against until you are at the installation site and you are rendering at full resolution. \")]),_c('h3',[_vm._v(\"Ocean Movement\")]),_c('p',[_vm._v(\" The essential movement of the scene is some randomized trochoids, or ‘Gerstner waves’, which provide the gentle oscillating sway. Similar to Thon 2005, there is less sway for joints closer to the seafloor, which move more in an ellipsoidal. For the fluid movement, I ended up adapting a GPU-based Navier-Stokes implementation from David Li. The fluid sim provides a place to inject user motion vectors as temperature ‘splats, which contribute to a fixed ‘fluid field. Components (kelp joints, debris, and bubbles) then use their position in the scene as a lookup in a 3D velocity texture. \")]),_c('h3',[_vm._v(\"Lighting\")]),_c('p',[_vm._v(\" The kelp blade shading was a huge aspect of creating a convincing kelp forest scene, due to the intricate details of foliage lighting like semi-transparency and occlusion. For this, Paul Houx helped out and ended up with a very creative two-pass solution. The first pass renders a black-and-white image of the light transmission of all kelp blades from the camera’s eye point, front to back, with an additional thickness texture to add some variance to each blade’s transmission. Other than this pass, the entire scene is rendered with depth buffer enabled, so the kelp blade transmission texture is rendered first. Then, the blades are rendered along with the rest of the scene, using a blurred version of the transmission buffer for shading. \")]),_c('p',[_vm._v(\" Probably the most important aspect that creates a sense of depth was the fog, which was based on the simple model found here. For the color of the fog, I attached the background texture to and looked into that for each element, which was created procedurally using a simple ray trace. \")]),_c('p',[_vm._v(\" The last remaining elements contributing to lighting were caustics and sunrays. Caustics are the usual randomized lookup into a cellular-looking texture based on position and texture coordinate. Sunrays were a bit more expensive (particularly considering our multi-viewport scene), implemented as a post-process radial blur based on the sun location. We ended up only having one ‘sun’ in the middle of the front wall, although I would have loved to have been able to place one at every corner of the room, even allowing the beams to cross. \")]),_c('h3',[_vm._v(\"Kelp Strand Editor\")]),_c('p',[_vm._v(\" Usually when working on a project that contains natural components such as a forest, we’d like to populate the scene procedurally as it makes updates convenient - every time you load the scene you’ll get the latest changes. Due to the desire for a very dense and ‘lush’ aesthetic, and that we wanted the kelp blades to sway naturally like they do in the ocean, as well as respond to human interaction, this was quite the challenge. \")]),_c('p',[_vm._v(\" My first attempt at addressing this was to manually assign levels of detail based on each strand’s distance to the center of the room. However, this proved to be inadequate, as we still needed about twenty very high-level strands that users could manipulate by walking or waving their hands, and then hundreds of medium level strands behind these to create the feeling of a forest in all directions. Each strand needed between fifty and a couple hundred blades to look natural and dense, and as each blade is basically a separate cloth simulation, well it was a ton of physics joints, using GPU compute or not. \")]),_c('p',[_vm._v(\" After realizing that we needed more control of each strand, I built a ‘strand editor’ GUI that allowed me to first randomly populate some strands within a region on the XZ plane, assigning them with initial properties. I then ‘pruned’ the kelp strands that either didn’t add much to the forest composition (sometimes to give an open space) or were already occluded by other strands in front of them, until we had a layout that was fairly sparse yet felt dense from the four viewpoints in the room. Every time an edit was made, the entire KelpStrand container was pushed onto a stack, which allowed us infinite undo during the forest editing process. Properties of the strands could then be edited either by region (which would randomly generate some things within a range) or individually, such as height, resting shape (BSpline), blade pounds per stipe (the kelp stalk) joint. I also added editing controls for each individual kelp blade (size, direction, stiffness, resting shape, etc.), which was mostly only used in the largest strands \")]),_c('p',[_vm._v(\" One big optimization was disabling physics update on the low-lod group, and instead using only the trochoidal wave movement to give them the oceanic sway. As long as they are far enough away so the fog makes them feel non-interactive, this worked great to add depth to the forest. \")]),_c('b-img',{staticClass:\"media\",attrs:{\"src\":require(\"@/assets/projects/kelproom/strand_layout_lod.png\"),\"fluid\":\"\"}}),_c('b-img',{staticClass:\"media\",attrs:{\"src\":require(\"@/assets/projects/kelproom/kelpstrand_inspector.png\"),\"fluid\":\"\"}}),_c('h3',[_vm._v(\"Ocean Debris and Bubbles\")]),_c('p',[_vm._v(\" The other elements of the scene were much simpler. Ocean debris was added as simple particle sprites, with some simple skewing and then billboarded to match the orientation of each viewport. Ocean bubbles were modelled as spheres with some modulation in the vertex shader. To make them look translucent, I took a run-of-the-mill sky environment map and then altered the hue to match the color of our scene. It was cheap and looked fine for the little guys. \")]),_c('h3',[_vm._v(\"Configuration\")]),_c('p',[_vm._v(\" The application configuration is stored in json files that are both set from a master configuration and then later in the user interface. This config system is something I’ve been developing over the course of a dozen or so similar projects, to be both flexible for the nature of this fast-paced work and also robust in tracking down the source of error. There are three separate json files that are read on app reload, which are merged into one global config: \")]),_vm._m(3),_vm._m(4),_vm._m(5),_c('h3',[_vm._v(\"Dev Tools\")]),_vm._m(6),_c('p',[_vm._v(\" One very sweet aspect of this setup is that once we are happy with a prototype of whatever you are building, you already have a near-production quality system that can be shipped statically within the executable, with no extra need for runtime script parsing or any VM overhead. All you really need at that point is a bit of refactoring, which is also convenient when live coding since you can ensure with every save that the code functions the same. \")])],1)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"topInfo\"},[_c('p',[_vm._v(\" When: 2019\"),_c('br'),_vm._v(\" Client: La Mer, Agency: \"),_c('a',{attrs:{\"href\":\"https://www.pattenstudio.com/\"}},[_vm._v(\"Patten Studio\")]),_c('br'),_vm._v(\" Role: Lead Programmer \")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_c('p',[_vm._v(\" Part of a larger activation campaign with Patten Studio, we built an interactive kelp forest that spanned two rooms, projected onto seven walls of varying shape. This was designed to help tell the story of a brand product during an exhibition held at Shanghai’s Power Station of Art. \")]),_c('p',[_vm._v(\" From a creative standpoint, we took inspiration in the kelp forests found in the Channel Islands off the California coast. The life-size kelp strands exhibited a natural oceanic sway, and viewers could influence the movement by waving their arms. Personally, this was quite a challenging project, given the sheer size and shape of the rooms, that the exhibition was in Shanghai, China, a new and very foreign country to myself, and that interactive forests are both beautiful and intricate. Nonetheless, creating a scene based on nature using almost entirely procedural methods has to be on the top of my list of things I love about programming. \")]),_c('p',[_c('a',{attrs:{\"href\":\"https://www.pattenstudio.com/works/the-edge-of-the-sea\"}},[_vm._v(\"Full project information\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\" The application was built in C++ using \"),_c('a',{attrs:{\"href\":\"https://www.libcinder.org/\"}},[_vm._v(\"Cinder\")]),_vm._v(\" along with a few components from my personal library called \"),_c('a',{attrs:{\"href\":\"https://github.com/richardeakin/mason\"}},[_vm._v(\"mason\")]),_vm._v(\". This closer-to-metal approach allows us to control crucial bottlenecks that are common in installations of this nature, like running at massive resolutions (the larger of the two rooms was 11,000x1060 pixels), rendering to quirky wall layouts using multiple viewports, and using custom GPU-based physics and rendering to more easily fill up these large canvases and remain running at 60 frames-per-second. On the other hand, beginning with a few well-tested components found in libcinder or add-ons lets us get running off the ground fast enough to deliver for a short deadline. \")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\" config.json: the master config, with sane defaults and some documentation \")]),_c('li',[_vm._v(\" local.json: developer-specific overrides, unversioned \")]),_c('li',[_vm._v(\" user.json: changes from the UI, can be saved on ctrl + s \")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\" The configuration is managed with a class called \"),_c('code',[_vm._v(\"mason::Info\")]),_vm._v(\", modeled after a data structure found in more dynamic languages such as javascript objects but still with a bit of type checking in place. It's well suited for loading / saving from configs as well as manual serialization. The structure is based on a key = \"),_c('code',[_vm._v(\"std::string\")]),_vm._v(\" to value = \"),_c('code',[_vm._v(\"std::any\")]),_vm._v(\" relationship, so you can hold anything you want for the value as long as you know how to convert it back at runtime. mason::Info converts to and from most of the types used in cinder, along with some convenience things like converting a json array \"),_c('code',[_vm._v(\"[1, 2, 3, 4]\")]),_vm._v(\" to \"),_c('code',[_vm._v(\"glm::vec4(1, 2, 3, 4)\")]),_vm._v(\" or \"),_c('code',[_vm._v(\"ci::ColorA(1, 2, 3, 4)\")]),_vm._v(\" depending on the C++ type. \")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\" All of the major components of the application contain three methods: \"),_c('code',[_vm._v(\"load( const Info &info )\")]),_vm._v(\", \"),_c('code',[_vm._v(\"save( Info &info )\")]),_vm._v(\", and \"),_c('code',[_vm._v(\"updateUI()\")]),_vm._v(\". I group these together as the three control the configuration together. I’ll usually start with adding components to the UI, and then when it is in a good place, fill out the load() / save() methods, hitting a Ctrl+S followed by Ctrl+Shift+R for good measure to ensure everything reloads correctly. \")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\" Live coding is an important aspect of my workflow, to the point that I feel limited when I use tools that don’t support it. C++ is notorious for long compile times and a static build nature, however times are changing. For the past couple of years, I’ve been using \"),_c('a',{attrs:{\"href\":\"https://molecular-matters.com/products_livepp.html\"}},[_vm._v(\"Live++\")]),_vm._v(\" along with immediate-mode GUIs (the popular \"),_c('a',{attrs:{\"href\":\"https://github.com/ocornut/imgui\"}},[_vm._v(\"Dear ImGui\")]),_vm._v(\") so that working with code that is constantly updated becomes seamless. The creative process is obviously improved, but furthermore, the process of debugging or even figuring out new code becomes a new, quite lively experience. I would go as far as to say that I try to enable as much hot-loaded functionality for team reviews, since it allows me to show experimental features on a dime, and get immediate feedback about them. Alternatively, a feature may be left to the question “could you do that…” and is passed up before inspection. \")])}]\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"project\">\n        <h1>Kelp Room at Power Station of Art, Shanghai</h1>\n        <div class=\"topInfo\">\n            <p>\n                When: 2019<br />\n                Client: La Mer, Agency:\n                <a href=\"https://www.pattenstudio.com/\">Patten Studio</a><br />\n                Role: Lead Programmer\n            </p>\n        </div>\n        <div class=\"media\">\n            <b-embed\n                class=\"media\"\n                type=\"iframe\"\n                aspect=\"16by9\"\n                allowfullscreen\n                src=\"https://player.vimeo.com/video/383930410\"\n            ></b-embed>\n        </div>\n        <div class=\"content\">\n            <p>\n                Part of a larger activation campaign with Patten Studio, we built an interactive kelp forest that\n                spanned two rooms, projected onto seven walls of varying shape. This was designed to help tell the story\n                of a brand product during an exhibition held at Shanghai’s Power Station of Art.\n            </p>\n            <p>\n                From a creative standpoint, we took inspiration in the kelp forests found in the Channel Islands off the\n                California coast. The life-size kelp strands exhibited a natural oceanic sway, and viewers could\n                influence the movement by waving their arms. Personally, this was quite a challenging project, given the\n                sheer size and shape of the rooms, that the exhibition was in Shanghai, China, a new and very foreign\n                country to myself, and that interactive forests are both beautiful and intricate. Nonetheless, creating\n                a scene based on nature using almost entirely procedural methods has to be on the top of my list of\n                things I love about programming.\n            </p>\n            <p>\n                <a href=\"https://www.pattenstudio.com/works/the-edge-of-the-sea\">Full project information</a>\n            </p>\n        </div>\n        <div class=\"media\">\n            <b-carousel\n                id=\"carousel-1\"\n                :interval=\"6000\"\n                controls\n                indicators\n                background=\"#ababab\"\n                img-width=\"1920\"\n                img-height=\"1280\"\n                style=\"text-shadow: 1px 1px 2px #333;\"\n            >\n                <b-carousel-slide img-src=\"@/assets/projects/kelproom/room_with_wechat_stubs.jpg\" />\n                <b-carousel-slide img-src=\"@/assets/projects/kelproom/hallway-scaled.jpg\" />\n                <b-carousel-slide img-src=\"@/assets/projects/kelproom/kelproom_hallway.jpg\" />\n                <b-carousel-slide img-src=\"@/assets/projects/kelproom/kelproom_4walls.jpg\" />\n                <b-carousel-slide img-src=\"@/assets/projects/kelproom/kelproom_inapp.jpg\" />\n                <b-carousel-slide img-src=\"@/assets/projects/kelproom/kelproom_inapp_ui.jpg\" />\n            </b-carousel>\n        </div>\n        <div class=\"content\">\n            <h2>Technical Description</h2>\n            <p>\n                The application was built in C++ using\n                <a href=\"https://www.libcinder.org/\">Cinder</a> along with a few components from my personal library\n                called <a href=\"https://github.com/richardeakin/mason\">mason</a>. This closer-to-metal approach allows\n                us to control crucial bottlenecks that are common in installations of this nature, like running at\n                massive resolutions (the larger of the two rooms was 11,000x1060 pixels), rendering to quirky wall\n                layouts using multiple viewports, and using custom GPU-based physics and rendering to more easily fill\n                up these large canvases and remain running at 60 frames-per-second. On the other hand, beginning with a\n                few well-tested components found in libcinder or add-ons lets us get running off the ground fast enough\n                to deliver for a short deadline.\n            </p>\n            <h3>Hardware Setup</h3>\n            <p>\n                Each room runs on one Windows 10 PC with an Intel Core i7-9800X CPU and dual NVidia Quadro RTX 5000\n                GPUs. We used NVidia Mosaic to stitch together seven 1080p displays for the room with four walls and\n                five 1080p displays for the corridor (three walls), both laid out as a long horizontal strip.\n            </p>\n            <p>\n                We manage the projector overlap as well as varying shapes of the walls using Cinder-Warping, which was\n                configured per-room with a GUI built directly into the application. Using a custom warping solution here\n                allowed us to work fast without the need of hiring a third-party vendor to handle projection mapping,\n                and at the same time allow us to make last-minute adjustments within our tight time-frame.\n            </p>\n            <b-img class=\"media\" src=\"@/assets/projects/kelproom/warping_config-scaled.jpg\" fluid />\n            <h3>Motion Sensors</h3>\n            <p>\n                The scene is made interactive with a network of Intel RealSense D435 depth cameras, which output motion\n                vectors that are injected as temperature splats into a 3D fluid field. Each sensor runs on a separate\n                Raspberry Pi 3, computes sparse optical flow on the depth image and sends motion vectors to the client\n                PC over a websocket. We built a gui to monitor this, filter or solo specific sensors, and also playback\n                simple recordings of users in the space for testing.\n            </p>\n            <p>\n                The sensors had to be mounted quite high, and this combined with the dark nature of the room meant quite\n                a lot of noise. We combated this by considering the motion vectors over time, so only sudden and drastic\n                movements (eg. walking) would trigger motion vectors.\n            </p>\n            <b-img class=\"media\" src=\"@/assets/projects/kelproom/ladder-scaled.jpg\" fluid />\n            <h3>Scene</h3>\n            <p>\n                To render the scene within the panoramic projector layout, a separate viewport is configured for each\n                wall, with perspective cameras (ci::CameraPersp) centered at the scene origin and rotated ninety degrees\n                to each other. Due to the uneven shape of the room (the front and back walls were about four times\n                longer than the left and right walls), we weren’t able to achieve a perfect ‘skybox’ feeling at all\n                depths, so we focused on configuring each camera’s field of view to align up at a specific distance from\n                the origin. Then we focused kelp strands near the corners at this distance, so that they could naturally\n                sway between the walls. Strands at other distances near the wall edges were placed considerably further\n                back, so that (along with the fog at this distance) they felt like a natural part of the forest\n                composition, despite not being able to traverse between walls. Creating a completely seamless experience\n                between adjacent walls is something I’d like to return to in future projects since it really is quite\n                effective in providing immersion in public spaces like our arrangement.\n            </p>\n            <b-img class=\"media\" src=\"@/assets/projects/kelproom/scene_viewports.jpg\" fluid />\n            <h3>Structure of the Kelp Strands</h3>\n            <b-img right class=\"media-right\" src=\"@/assets/projects/kelproom/joint_structure.jpg\" width=\"250px\" />\n            <p>\n                The kelps stipes (strands or stalks) were modeled as rope joints anchored on the seafloor, slightly\n                reducing the spring coefficient as you go further from the base. They were rendered with a single\n                instanced ci::geom::Cylinder, where the cylinder’s width was controlled based on height and a per-strand\n                randomness. The kelp blades (leaves) were modeled as cloths (NxM lattice of joints) anchored on a\n                specific stipe joint, rendered with a geom::Plane and randomly picking from a set of transparency\n                enabled textures. The spring coefficient of the center-most row of joints is increased a bit to give the\n                blade a bit more of a spine as it sways.\n            </p>\n            <h3>Physics and Geometry</h3>\n            <p>\n                The physics simulation is handled using one compute shader, which processes an SSBO of about 500k\n                mass-spring joints. While most of the application runs at a 60fps fixed timestep, the physics loop must\n                run many more times than this to allow for the spring forces to resolve. For our large canvas, we could\n                only eke out eight physics updates per app update, although it would have been nice to run it closer to\n                about 20x. I used basic midpoint Euler integration, which was good enough for our needs as we didn’t\n                deal with collisions.\n            </p>\n            <p>\n                The initial spawning positions of each kelp strand and blade are repositioned to look more natural using\n                B-Spline interpolation and some simple fractal noise to distribute blade placement. These positions\n                essentially become restoring points for each joint, so that no matter how users affected the scene via\n                movement, each joint would always restore to their initial positions. This was quite a rigid solution in\n                my opinion, but it solved many problems around using spring-mass physics within an interactive and noisy\n                environment, so that we could ensure the scene always looked natural. In the future, I’d like to\n                investigate a solution that uses joint to joint constraints in these situations, so that the spatial\n                relationships can be conserved while still allowing the shape of each strand and joint to evolve over\n                time, as it would in the ocean.\n            </p>\n            <p>\n                It was necessary for quite a high count of physics joints in order to make the scene look natural while\n                standing right next to the walls, which was the main motivation behind implementing custom physics on\n                the GPU. However since vertex drawing was nowhere’s near the bottleneck, I was able to reduce the count\n                quite considerably using cubic and bicubic interpolation to try extremely smooth curves for the kelp\n                stipes and blades, respectively. The mapping was achieved by taking the floating point texture\n                coordinate for each vertex and converting it to a 1D index into the joints buffer. This scaled quite\n                nicely since we could control the smoothness of the geometry completely independent of the interactive\n                joints, which is great for when you don’t exactly know what type of performance hurdles you’ll be up\n                against until you are at the installation site and you are rendering at full resolution.\n            </p>\n            <h3>Ocean Movement</h3>\n            <p>\n                The essential movement of the scene is some randomized trochoids, or ‘Gerstner waves’, which provide the\n                gentle oscillating sway. Similar to Thon 2005, there is less sway for joints closer to the seafloor,\n                which move more in an ellipsoidal. For the fluid movement, I ended up adapting a GPU-based Navier-Stokes\n                implementation from David Li. The fluid sim provides a place to inject user motion vectors as\n                temperature ‘splats, which contribute to a fixed ‘fluid field. Components (kelp joints, debris, and\n                bubbles) then use their position in the scene as a lookup in a 3D velocity texture.\n            </p>\n            <h3>Lighting</h3>\n            <p>\n                The kelp blade shading was a huge aspect of creating a convincing kelp forest scene, due to the\n                intricate details of foliage lighting like semi-transparency and occlusion. For this, Paul Houx helped\n                out and ended up with a very creative two-pass solution. The first pass renders a black-and-white image\n                of the light transmission of all kelp blades from the camera’s eye point, front to back, with an\n                additional thickness texture to add some variance to each blade’s transmission. Other than this pass,\n                the entire scene is rendered with depth buffer enabled, so the kelp blade transmission texture is\n                rendered first. Then, the blades are rendered along with the rest of the scene, using a blurred version\n                of the transmission buffer for shading.\n            </p>\n            <p>\n                Probably the most important aspect that creates a sense of depth was the fog, which was based on the\n                simple model found here. For the color of the fog, I attached the background texture to and looked into\n                that for each element, which was created procedurally using a simple ray trace.\n            </p>\n            <p>\n                The last remaining elements contributing to lighting were caustics and sunrays. Caustics are the usual\n                randomized lookup into a cellular-looking texture based on position and texture coordinate. Sunrays were\n                a bit more expensive (particularly considering our multi-viewport scene), implemented as a post-process\n                radial blur based on the sun location. We ended up only having one ‘sun’ in the middle of the front\n                wall, although I would have loved to have been able to place one at every corner of the room, even\n                allowing the beams to cross.\n            </p>\n            <h3>Kelp Strand Editor</h3>\n            <p>\n                Usually when working on a project that contains natural components such as a forest, we’d like to\n                populate the scene procedurally as it makes updates convenient - every time you load the scene you’ll\n                get the latest changes. Due to the desire for a very dense and ‘lush’ aesthetic, and that we wanted the\n                kelp blades to sway naturally like they do in the ocean, as well as respond to human interaction, this\n                was quite the challenge.\n            </p>\n            <p>\n                My first attempt at addressing this was to manually assign levels of detail based on each strand’s\n                distance to the center of the room. However, this proved to be inadequate, as we still needed about\n                twenty very high-level strands that users could manipulate by walking or waving their hands, and then\n                hundreds of medium level strands behind these to create the feeling of a forest in all directions. Each\n                strand needed between fifty and a couple hundred blades to look natural and dense, and as each blade is\n                basically a separate cloth simulation, well it was a ton of physics joints, using GPU compute or not.\n            </p>\n            <p>\n                After realizing that we needed more control of each strand, I built a ‘strand editor’ GUI that allowed\n                me to first randomly populate some strands within a region on the XZ plane, assigning them with initial\n                properties. I then ‘pruned’ the kelp strands that either didn’t add much to the forest composition\n                (sometimes to give an open space) or were already occluded by other strands in front of them, until we\n                had a layout that was fairly sparse yet felt dense from the four viewpoints in the room. Every time an\n                edit was made, the entire KelpStrand container was pushed onto a stack, which allowed us infinite undo\n                during the forest editing process. Properties of the strands could then be edited either by region\n                (which would randomly generate some things within a range) or individually, such as height, resting\n                shape (BSpline), blade pounds per stipe (the kelp stalk) joint. I also added editing controls for each\n                individual kelp blade (size, direction, stiffness, resting shape, etc.), which was mostly only used in\n                the largest strands\n            </p>\n            <p>\n                One big optimization was disabling physics update on the low-lod group, and instead using only the\n                trochoidal wave movement to give them the oceanic sway. As long as they are far enough away so the fog\n                makes them feel non-interactive, this worked great to add depth to the forest.\n            </p>\n            <b-img class=\"media\" src=\"@/assets/projects/kelproom/strand_layout_lod.png\" fluid />\n            <b-img class=\"media\" src=\"@/assets/projects/kelproom/kelpstrand_inspector.png\" fluid />\n            <h3>Ocean Debris and Bubbles</h3>\n            <p>\n                The other elements of the scene were much simpler. Ocean debris was added as simple particle sprites,\n                with some simple skewing and then billboarded to match the orientation of each viewport. Ocean bubbles\n                were modelled as spheres with some modulation in the vertex shader. To make them look translucent, I\n                took a run-of-the-mill sky environment map and then altered the hue to match the color of our scene. It\n                was cheap and looked fine for the little guys.\n            </p>\n            <h3>Configuration</h3>\n            <p>\n                The application configuration is stored in json files that are both set from a master configuration and\n                then later in the user interface. This config system is something I’ve been developing over the course\n                of a dozen or so similar projects, to be both flexible for the nature of this fast-paced work and also\n                robust in tracking down the source of error. There are three separate json files that are read on app\n                reload, which are merged into one global config:\n            </p>\n            <ul>\n                <li>\n                    config.json: the master config, with sane defaults and some documentation\n                </li>\n                <li>\n                    local.json: developer-specific overrides, unversioned\n                </li>\n                <li>\n                    user.json: changes from the UI, can be saved on ctrl + s\n                </li>\n            </ul>\n            <p>\n                The configuration is managed with a class called\n                <code>mason::Info</code>, modeled after a data structure found in more dynamic languages such as\n                javascript objects but still with a bit of type checking in place. It's well suited for loading / saving\n                from configs as well as manual serialization. The structure is based on a key =\n                <code>std::string</code> to value = <code>std::any</code> relationship, so you can hold anything you\n                want for the value as long as you know how to convert it back at runtime. mason::Info converts to and\n                from most of the types used in cinder, along with some convenience things like converting a json array\n                <code>[1, 2, 3, 4]</code> to <code>glm::vec4(1, 2, 3, 4)</code> or\n                <code>ci::ColorA(1, 2, 3, 4)</code> depending on the C++ type.\n            </p>\n            <p>\n                All of the major components of the application contain three methods:\n                <code>load( const Info &info )</code>, <code>save( Info &info )</code>, and <code>updateUI()</code>. I\n                group these together as the three control the configuration together. I’ll usually start with adding\n                components to the UI, and then when it is in a good place, fill out the load() / save() methods, hitting\n                a Ctrl+S followed by Ctrl+Shift+R for good measure to ensure everything reloads correctly.\n            </p>\n            <h3>Dev Tools</h3>\n            <p>\n                Live coding is an important aspect of my workflow, to the point that I feel limited when I use tools\n                that don’t support it. C++ is notorious for long compile times and a static build nature, however times\n                are changing. For the past couple of years, I’ve been using\n                <a href=\"https://molecular-matters.com/products_livepp.html\">Live++</a>\n                along with immediate-mode GUIs (the popular\n                <a href=\"https://github.com/ocornut/imgui\">Dear ImGui</a>) so that working with code that is constantly\n                updated becomes seamless. The creative process is obviously improved, but furthermore, the process of\n                debugging or even figuring out new code becomes a new, quite lively experience. I would go as far as to\n                say that I try to enable as much hot-loaded functionality for team reviews, since it allows me to show\n                experimental features on a dime, and get immediate feedback about them. Alternatively, a feature may be\n                left to the question “could you do that…” and is passed up before inspection.\n            </p>\n            <p>\n                One very sweet aspect of this setup is that once we are happy with a prototype of whatever you are\n                building, you already have a near-production quality system that can be shipped statically within the\n                executable, with no extra need for runtime script parsing or any VM overhead. All you really need at\n                that point is a bit of refactoring, which is also convenient when live coding since you can ensure with\n                every save that the code functions the same.\n            </p>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {};\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../../assets/projects/style.scss\";\n\n.media-right {\n    margin-left: 1em;\n}\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./KelpProject.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./KelpProject.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./KelpProject.vue?vue&type=template&id=520286e2&scoped=true&\"\nimport script from \"./KelpProject.vue?vue&type=script&lang=js&\"\nexport * from \"./KelpProject.vue?vue&type=script&lang=js&\"\nimport style0 from \"./KelpProject.vue?vue&type=style&index=0&id=520286e2&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"520286e2\",\n  null\n  \n)\n\nexport default component.exports","module.exports = __webpack_public_path__ + \"img/kelproom_inapp_ui.e612d409.jpg\";","module.exports = __webpack_public_path__ + \"img/joint_structure.5d1976fd.jpg\";","module.exports = __webpack_public_path__ + \"img/strand_layout_lod.9478f4aa.png\";","module.exports = __webpack_public_path__ + \"img/kelproom_4walls.ee4c49df.jpg\";","module.exports = __webpack_public_path__ + \"img/warping_config-scaled.f7dc1d51.jpg\";","module.exports = __webpack_public_path__ + \"img/scene_viewports.0ad7f56f.jpg\";"],"sourceRoot":""}