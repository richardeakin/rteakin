{"version":3,"sources":["webpack:///./src/views/projects/CinderAudioProject.vue?5a8e","webpack:///src/views/projects/CinderAudioProject.vue","webpack:///./src/views/projects/CinderAudioProject.vue?26aa","webpack:///./src/views/projects/CinderAudioProject.vue","webpack:///./src/assets/projects/cinder-audio/audio_layers.png","webpack:///./src/views/projects/CinderAudioProject.vue?1574"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","_v","_m","attrs","staticRenderFns","component","module","exports"],"mappings":"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","file":"js/chunk-bb2b758a.c7dc94b5.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"project\"},[_c('h1',[_vm._v(\"Cinder Audio\")]),_vm._m(0),_c('div',{staticClass:\"content side-by-side\"},[_c('b-img',{staticClass:\"media audio-layers\",attrs:{\"right\":\"\",\"src\":require(\"@/assets/projects/cinder-audio/audio_layers.png\")}}),_vm._m(1),_vm._m(2)],1),_vm._m(3),_vm._m(4),_c('div',{staticClass:\"content\"},[_c('h2',[_vm._v(\"Applications\")]),_vm._m(5),_c('h4',[_vm._v(\"Face Controlled Synth\")]),_vm._m(6),_c('b-embed',{staticClass:\"media\",attrs:{\"type\":\"iframe\",\"aspect\":\"16by9\",\"allowfullscreen\":\"\",\"src\":\"https://player.vimeo.com/video/351084708\"}}),_c('h4',[_vm._v(\"Falling Gears\")]),_vm._m(7),_c('b-embed',{staticClass:\"media\",attrs:{\"type\":\"iframe\",\"aspect\":\"16by9\",\"allowfullscreen\":\"\",\"src\":\"https://player.vimeo.com/video/108706095\"}}),_c('h4',[_vm._v(\"Symphonologie\")]),_vm._m(8),_c('b-embed',{staticClass:\"media\",attrs:{\"type\":\"iframe\",\"aspect\":\"16by9\",\"allowfullscreen\":\"\",\"src\":\"https://player.vimeo.com/video/191749869\"}})],1)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"topInfo\"},[_c('p',[_vm._v(\" 2012 - 2014\"),_c('br'),_vm._v(\" Source Code: part of the \"),_c('a',{attrs:{\"href\":\"https://github.com/cinder/cinder\"}},[_vm._v(\"Cinder C++ Framework\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\" While working at The Barbarian Group, I took on the redesign of the Cinder audio API (\"),_c('code',[_vm._v(\"ci::audio\")]),_vm._v(\"), with the goals of creating something both powerful and flexible enough to be directly combined with Cinder's graphics capabilities. We went with a modular design in the likes of Pure Data and Web Audio, maintaining the spirit of providing C++ tools to build the engine you want. \")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\" Below is a discussion of some of the nice features in this audio library, while you can refer to the \"),_c('a',{attrs:{\"href\":\"https://libcinder.org/docs/guides/audio/index.html\"}},[_vm._v(\"cinder audio guide\")]),_vm._v(\" and the \"),_c('a',{attrs:{\"href\":\"https://github.com/cinder/Cinder/tree/master/samples/_audio\"}},[_vm._v(\"shipped samples\")]),_vm._v(\" for in depth usage details. \")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_c('h2',[_vm._v(\"Library Features\")]),_c('h4',[_vm._v(\"Native Device Management\")]),_c('p',[_vm._v(\" We wanted to have tight control over the audio processing at an OS level, so there is a hardware abstraction on each platform. This allows us to minimize dependencies and make tweaks when we need them even at production time. We support a number of platforms (Windows, OS X, iOS, Linux, Android), so I'd say this was the largest aspect of the project concerning development time. However once built, it's a great thing to have, especially when real-time low-latency is your target. \")]),_c('h4',[_vm._v(\"Built-in Nodes\")]),_c('p',[_vm._v(\" Like any nice modular audio API, there are some nice things you can use out of the box to build custom audio engines or effects. For sample playback, there is the \"),_c('code',[_vm._v(\"BufferPlayerNode\")]),_vm._v(\" (in-memory) and \"),_c('code',[_vm._v(\"FilePlayerNode\")]),_vm._v(\" (streaming)\\\\ (see \"),_c('a',{attrs:{\"href\":\"https://libcinder.org/docs/guides/audio/index.html#read_audio\"}},[_vm._v(\"notes here\")]),_vm._v(\"). For waveform generation, there are both low level nodes (sinewave, triangle, phase, etc) as well as the band-limited \"),_c('code',[_vm._v(\"GenOscNode\")]),_vm._v(\" that has presets for the common waveform types. Nodes for filtering and delay are also in there, as well as general math operations or just using a C++11 lambda to do some audio processing. \"),_c('a',{attrs:{\"href\":\"https://libcinder.org/docs/guides/audio/index.html#other_nodes\"}},[_vm._v(\"Details\")]),_vm._v(\". \")]),_c('p',[_vm._v(\" Nodes in \"),_c('code',[_vm._v(\"ci::audio\")]),_vm._v(\" can be multi-channel for ease of use (default is they match their inputs, but this can be overridden). You use ChannelRouterNode to both separate channels from multi-channel nodes and to remap mono nodes, for example when designing a spatialized multi-channel audio engine. \")]),_c('h4',[_vm._v(\"Digital Signal Processing\")]),_c('p',[_vm._v(\" At the core, there's an audio library for doing typical audio math, like vector math operations, windowing, sample-rate conversion, and FFT (Fast Fourier Transform). All the other components build on this efficiency-orientated layer, although the \"),_c('code',[_vm._v(\"cinder::audio::dsp\")]),_vm._v(\" namespace is also meant to be used in end projects when needed. \")]),_c('h4',[_vm._v(\"Sample Accurate Scheduling\")]),_c('p',[_vm._v(\" One very nice feature in \"),_c('code',[_vm._v(\"ci::audio\")]),_vm._v(\" is the ability to schedule events with sub-sample accuracy. This allows you to synchronize things running on other threads (commonly visuals, but can also be networking events, etc). You do this by specifying a time in the future, usually within the next processing block. Audio params are controlled in a similar fashion although with a bit more control, using the \"),_c('code',[_vm._v(\"Param\")]),_vm._v(\" mechanism. Most of the built-in nodes expose their parameters using these where it makes sense. Similar to the Web Audio API, you can also use other \"),_c('code',[_vm._v(\"ci::audio::Node\")]),_vm._v(\"s as inputs to \"),_c('code',[_vm._v(\"ci::audio::Param\")]),_vm._v(\". \")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_c('h2',[_vm._v(\"Cinder Blocks (Add-ons)\")]),_c('p',[_vm._v(\" Because of the modular structure and native C++ API, it's easy to extend \"),_c('code',[_vm._v(\"ci::audio\")]),_vm._v(\"'s built-in functionality by adding custom Nodes for synthesis, effects, custom processing, or adding other platform-specific backends. Here are some that are public on github. \")]),_c('h4',[_vm._v(\"Blocks extending \"),_c('code',[_vm._v(\"ci::audio::Node\")]),_vm._v(\"s\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"https://github.com/richardeakin/Cinder-Stk\"}},[_vm._v(\"Cinder-Stk\")]),_vm._v(\" - adds support for the \"),_c('a',{attrs:{\"href\":\"https://ccrma.stanford.edu/software/stk/index.html\"}},[_vm._v(\"Synthesis Toolkit\")]),_vm._v(\", also wrapping many useful tools as Nodes for things like reverb, chorus, synth instruments, etc. Personally, I've used it in many projects for the \"),_c('a',{attrs:{\"href\":\"https://ccrma.stanford.edu/software/stk/classstk_1_1FreeVerb.html\"}},[_vm._v(\"FreeVerb\")]),_vm._v(\" implementation. \")]),_c('li',[_c('a',{attrs:{\"href\":\"https://github.com/richardeakin/Cinder-HISSConvolver\"}},[_vm._v(\"Cinder-HISSConvolver\")]),_vm._v(\" - adds a Node for convolution using the HISSTools Impulse Response Toolbox. Commonly used for convolution reverb, or just create interesting sound designs on real-time audio signals. \")]),_c('li',[_c('a',{attrs:{\"href\":\"https://github.com/notlion/Cinder-PureDataNode\"}},[_vm._v(\"Cinder-PureDataNode\")]),_vm._v(\" - wraps Pure Data within a Node, allowing you to write embedded pd patches, while also allowing you to use cinder to handle difficult cross-platform things like hardware i/o, file i/o, sample-rate conversion, and other low-level DSP operations. Also mentioned at PdCon16 (\"),_c('a',{attrs:{\"href\":\"http://www.nyu-waverlylabs.org/pdcon16/wp-content/uploads/2017/02/Proceedings_of_the_5th_International_Pure_Data_Convention.pdf\"}},[_vm._v(\"proceedings\")]),_vm._v(\", \\\"libpd: Past, Present, and Future of Embedding Pure Data). \")])]),_c('h4',[_vm._v(\"Blocks using \"),_c('code',[_vm._v(\"ci::audio::Node\")]),_vm._v(\"s\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"Cinder-SoundPlayer\"}},[_vm._v(\"Cinder-SoundPlayer\")]),_vm._v(\" - from \"),_c('a',{attrs:{\"href\":\"https://redpaperheart.com/\"}},[_vm._v(\"eRed Paper Heart\")]),_vm._v(\", provides higher-level audio file playback common in user interfaces. dev branch has some nice improvements (from me) for playback via a 'Buffer pool'. This is crucial in things like sound effects where you want them to be able to overlap. \")]),_c('li',[_c('a',{attrs:{\"href\":\"https://github.com/Potion/Cinder-poSoundManager\"}},[_vm._v(\"Cinder-poSoundManager\")]),_vm._v(\" - from Potion Design, similar audio file playback tool, with some more features like pan, loop, etc. \")])]),_c('h4',[_vm._v(\"Blocks adding extra Hardware Backends\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"https://github.com/cinder/Cinder-PortAudio\"}},[_vm._v(\"Cinder-PortAudio\")]),_vm._v(\" - allows you to use PortAudio as an additional audio hardware backend, selectable at runtime, notably used for adding ASIO / Dante support. More info on \"),_c('a',{attrs:{\"href\":\"https://discourse.libcinder.org/t/cinder-portaudio-portaudio-as-an-alternative-audio-backend/1346\"}},[_vm._v(\"this forum post\")]),_vm._v(\". \")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\" Here are some projects that I've worked on using\"),_c('code',[_vm._v(\"ci::audio\")]),_vm._v(\" that reach a bit beyond the run-of-the-mill sample file playback scenario. \")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\" A collaboration with \"),_c('a',{attrs:{\"href\":\"https://rarevolume.com/\"}},[_vm._v(\"Rare Volume\")]),_vm._v(\" using face movement and gestures to drive a combination of subtractive synthesis and studio audio compositions. Face joint positions and velocities were mapped to track volumes and parameters on a custom subtractive synthesis arrangement. The choice of audio tracks was driven based on extracted 'mood', which was mapped to the level of various tracks. \")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\" This is a sample that \"),_c('a',{attrs:{\"href\":\"https://github.com/cinder/Cinder/tree/master/samples/FallingGears/src\"}},[_vm._v(\"ships with cinder\")]),_vm._v(\", demonstrating physics driven audio synthesis. Gears fall when you drag your mouse and collisions between gears and walls or 'islands' trigger sound generators (\"),_c('code',[_vm._v(\"ci::audio::GenNode\")]),_vm._v(\"s) that are spatially arranged to make musical chords. \")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\" Another \"),_c('a',{attrs:{\"href\":\"https://rarevolume.com/work/symphonologie/\"}},[_vm._v(\"Rare Volume project\")]),_vm._v(\", held at the Louvre in Paris. This time, visuals were driving audio. Five microphones were used to isolate different sections of the symphony, which were analyzed as amplitude envelopes and magnitude frequency spectrums. During the project, I added support for MSW low-latency mode, a key step in obtaining a tight and highly reactive music visualizer on the Windows platform. \")])}]\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"project\">\r\n        <h1>Cinder Audio</h1>\r\n        <div class=\"topInfo\">\r\n            <p>\r\n                2012 - 2014<br>\r\n                Source Code: part of the <a href=\"https://github.com/cinder/cinder\">Cinder C++ Framework</a>\r\n            </p>\r\n        </div>\r\n        <div class=\"content side-by-side\">\r\n            <b-img class=\"media audio-layers\" right src=\"@/assets/projects/cinder-audio/audio_layers.png\" />\r\n            <p>\r\n                While working at The Barbarian Group, I took on the redesign of the Cinder audio API\r\n                (<code>ci::audio</code>), with the goals of creating something both powerful and flexible enough to be\r\n                directly combined with Cinder's graphics capabilities. We went with a modular design in the likes of\r\n                Pure Data and Web Audio, maintaining the spirit of providing C++ tools to build the engine you want.\r\n            </p>\r\n            <p>\r\n                Below is a discussion of some of the nice features in this audio library, while you can refer to the\r\n                <a href=\"https://libcinder.org/docs/guides/audio/index.html\">cinder audio guide</a> and the\r\n                <a href=\"https://github.com/cinder/Cinder/tree/master/samples/_audio\">shipped samples</a> for in depth usage details.\r\n            </p>\r\n        </div>\r\n        <div class=\"content\">\r\n            <!-- <div class=\"divider py-1 bg-primary\"></div> -->\r\n            <h2>Library Features</h2>\r\n            <h4>Native Device Management</h4>\r\n            <p>\r\n                We wanted to have tight control over the audio processing at an OS level, so there is a hardware\r\n                abstraction on each platform. This allows us to minimize dependencies and make tweaks when we need them\r\n                even at production time. We support a number of platforms (Windows, OS X, iOS, Linux, Android), so I'd\r\n                say this was the largest aspect of the project concerning development time. However once built, it's a\r\n                great thing to have, especially when real-time low-latency is your target.\r\n            </p>\r\n            <h4>Built-in Nodes</h4>\r\n            <p>\r\n                Like any nice modular audio API, there are some nice things you can use out of the box to build custom\r\n                audio engines or effects. For sample playback, there is the <code>BufferPlayerNode</code> (in-memory)\r\n                and <code>FilePlayerNode</code> (streaming)\\ (see\r\n                <a href=\"https://libcinder.org/docs/guides/audio/index.html#read_audio\">notes here</a>). For waveform\r\n                generation, there are both low level nodes (sinewave, triangle, phase, etc) as well as the band-limited\r\n                <code>GenOscNode</code> that has presets for the common waveform types. Nodes for filtering and delay\r\n                are also in there, as well as general math operations or just using a C++11 lambda to do some audio\r\n                processing. <a href=\"https://libcinder.org/docs/guides/audio/index.html#other_nodes\">Details</a>.\r\n            </p>\r\n            <p>\r\n                Nodes in <code>ci::audio</code> can be multi-channel for ease of use (default is they match their\r\n                inputs, but this can be overridden). You use ChannelRouterNode to both separate channels from\r\n                multi-channel nodes and to remap mono nodes, for example when designing a spatialized multi-channel\r\n                audio engine.\r\n            </p>\r\n            <h4>Digital Signal Processing</h4>\r\n            <p>\r\n                At the core, there's an audio library for doing typical audio math, like vector math operations,\r\n                windowing, sample-rate conversion, and FFT (Fast Fourier Transform). All the other components build on\r\n                this efficiency-orientated layer, although the <code>cinder::audio::dsp</code> namespace is also meant\r\n                to be used in end projects when needed.\r\n            </p>\r\n            <h4>Sample Accurate Scheduling</h4>\r\n            <p>\r\n                One very nice feature in <code>ci::audio</code> is the ability to schedule events with sub-sample\r\n                accuracy. This allows you to synchronize things running on other threads (commonly visuals, but can also\r\n                be networking events, etc). You do this by specifying a time in the future, usually within the next\r\n                processing block. Audio params are controlled in a similar fashion although with a bit more control,\r\n                using the <code>Param</code> mechanism. Most of the built-in nodes expose their parameters using these\r\n                where it makes sense. Similar to the Web Audio API, you can also use other <code>ci::audio::Node</code>s\r\n                as inputs to <code>ci::audio::Param</code>.\r\n            </p>\r\n        </div>\r\n        <div class=\"content\">\r\n            <h2>Cinder Blocks (Add-ons)</h2>\r\n            <p>\r\n                Because of the modular structure and native C++ API, it's easy to extend <code>ci::audio</code>'s\r\n                built-in functionality by adding custom Nodes for synthesis, effects, custom processing, or adding other\r\n                platform-specific backends. Here are some that are public on github.\r\n            </p>\r\n            <h4>Blocks extending <code>ci::audio::Node</code>s</h4>\r\n            <ul>\r\n                <li>\r\n                    <a href=\"https://github.com/richardeakin/Cinder-Stk\">Cinder-Stk</a> - adds support for the\r\n                    <a href=\"https://ccrma.stanford.edu/software/stk/index.html\">Synthesis Toolkit</a>, also wrapping\r\n                    many useful tools as Nodes for things like reverb, chorus, synth instruments, etc. Personally, I've\r\n                    used it in many projects for the\r\n                    <a href=\"https://ccrma.stanford.edu/software/stk/classstk_1_1FreeVerb.html\">FreeVerb</a>\r\n                    implementation.\r\n                </li>\r\n                <li>\r\n                    <a href=\"https://github.com/richardeakin/Cinder-HISSConvolver\">Cinder-HISSConvolver</a> - adds a\r\n                    Node for convolution using the HISSTools Impulse Response Toolbox. Commonly used for convolution\r\n                    reverb, or just create interesting sound designs on real-time audio signals.\r\n                </li>\r\n                <li>\r\n                    <a href=\"https://github.com/notlion/Cinder-PureDataNode\">Cinder-PureDataNode</a> - wraps Pure Data\r\n                    within a Node, allowing you to write embedded pd patches, while also allowing you to use cinder to\r\n                    handle difficult cross-platform things like hardware i/o, file i/o, sample-rate conversion, and\r\n                    other low-level DSP operations. Also mentioned at PdCon16 (<a\r\n                        href=\"http://www.nyu-waverlylabs.org/pdcon16/wp-content/uploads/2017/02/Proceedings_of_the_5th_International_Pure_Data_Convention.pdf\"\r\n                        >proceedings</a\r\n                    >, \"libpd: Past, Present, and Future of Embedding Pure Data).\r\n                </li>\r\n            </ul>\r\n            <h4>Blocks using <code>ci::audio::Node</code>s</h4>\r\n            <ul>\r\n                <li>\r\n                    <a href=\"Cinder-SoundPlayer\">Cinder-SoundPlayer</a> - from\r\n                    <a href=\"https://redpaperheart.com/\">eRed Paper Heart</a>, provides higher-level audio file playback\r\n                    common in user interfaces. dev branch has some nice improvements (from me) for playback via a\r\n                    'Buffer pool'. This is crucial in things like sound effects where you want them to be able to\r\n                    overlap.\r\n                </li>\r\n                <li>\r\n                    <a href=\"https://github.com/Potion/Cinder-poSoundManager\">Cinder-poSoundManager</a> - from Potion\r\n                    Design, similar audio file playback tool, with some more features like pan, loop, etc.\r\n                </li>\r\n            </ul>\r\n            <h4>Blocks adding extra Hardware Backends</h4>\r\n            <ul>\r\n                <li>\r\n                    <a href=\"https://github.com/cinder/Cinder-PortAudio\">Cinder-PortAudio</a> - allows you to use\r\n                    PortAudio as an additional audio hardware backend, selectable at runtime, notably used for adding\r\n                    ASIO / Dante support. More info on\r\n                    <a\r\n                        href=\"https://discourse.libcinder.org/t/cinder-portaudio-portaudio-as-an-alternative-audio-backend/1346\"\r\n                        >this forum post</a\r\n                    >.\r\n                </li>\r\n            </ul>\r\n        </div>\r\n        <div class=\"content\">\r\n            <h2>Applications</h2>\r\n            <p>\r\n                Here are some projects that I've worked on using<code>ci::audio</code> that reach a bit beyond the\r\n                run-of-the-mill sample file playback scenario.\r\n            </p>\r\n            <h4>Face Controlled Synth</h4>\r\n            <p>\r\n                A collaboration with <a href=\"https://rarevolume.com/\">Rare Volume</a> using face movement and gestures\r\n                to drive a combination of subtractive synthesis and studio audio compositions. Face joint positions and\r\n                velocities were mapped to track volumes and parameters on a custom subtractive synthesis arrangement.\r\n                The choice of audio tracks was driven based on extracted 'mood', which was mapped to the level of\r\n                various tracks.\r\n            </p>\r\n            <b-embed\r\n                class=\"media\"\r\n                type=\"iframe\"\r\n                aspect=\"16by9\"\r\n                allowfullscreen\r\n                src=\"https://player.vimeo.com/video/351084708\"\r\n            ></b-embed>\r\n            <h4>Falling Gears</h4>\r\n            <p>\r\n                This is a sample that\r\n                <a href=\"https://github.com/cinder/Cinder/tree/master/samples/FallingGears/src\">ships with cinder</a>,\r\n                demonstrating physics driven audio synthesis. Gears fall when you drag your mouse and collisions between\r\n                gears and walls or 'islands' trigger sound generators (<code>ci::audio::GenNode</code>s) that are\r\n                spatially arranged to make musical chords.\r\n            </p>\r\n            <b-embed\r\n                class=\"media\"\r\n                type=\"iframe\"\r\n                aspect=\"16by9\"\r\n                allowfullscreen\r\n                src=\"https://player.vimeo.com/video/108706095\"\r\n            ></b-embed>\r\n            <h4>Symphonologie</h4>\r\n            <p>\r\n                Another <a href=\"https://rarevolume.com/work/symphonologie/\">Rare Volume project</a>, held at the Louvre\r\n                in Paris. This time, visuals were driving audio. Five microphones were used to isolate different sections of the symphony, which were analyzed\r\n                as amplitude envelopes and magnitude frequency spectrums. During the project, I added support for MSW\r\n                low-latency mode, a key step in obtaining a tight and highly reactive music visualizer on the Windows platform.\r\n            </p>\r\n            <b-embed\r\n                class=\"media\"\r\n                type=\"iframe\"\r\n                aspect=\"16by9\"\r\n                allowfullscreen\r\n                src=\"https://player.vimeo.com/video/191749869\"\r\n            ></b-embed>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n\r\n@import \"../../assets/projects/style.scss\";\r\n@import \"../../assets/common.scss\";\r\n\r\n// .side-by-side {\r\n//     border-color: red;\r\n// }\r\n\r\n.audio-layers {\r\n    margin-left: 1em;\r\n}\r\n\r\nhr {\r\n    color: yellow;\r\n}\r\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CinderAudioProject.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CinderAudioProject.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./CinderAudioProject.vue?vue&type=template&id=604b0e71&scoped=true&\"\nimport script from \"./CinderAudioProject.vue?vue&type=script&lang=js&\"\nexport * from \"./CinderAudioProject.vue?vue&type=script&lang=js&\"\nimport style0 from \"./CinderAudioProject.vue?vue&type=style&index=0&id=604b0e71&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"604b0e71\",\n  null\n  \n)\n\nexport default component.exports","module.exports = __webpack_public_path__ + \"img/audio_layers.83691fb4.png\";","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CinderAudioProject.vue?vue&type=style&index=0&id=604b0e71&lang=scss&scoped=true&\""],"sourceRoot":""}